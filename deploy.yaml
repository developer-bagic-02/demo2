name: Deploy to Tomcat Server

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List directory contents
        run: ls -la

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Create SSH directory and known_hosts file
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        shell: /usr/bin/bash -e {0}

      - name: Get changed files
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Set variables
          REPO_OWNER="developer-bagic-02"
          REPO_NAME="demo2"

          # Get the latest commit SHA from the master branch
          LATEST_COMMIT_SHA=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits/master" | jq -r .sha)
          echo "Latest commit SHA: $LATEST_COMMIT_SHA"

          # Get the parent commit SHA
          PARENT_COMMIT_SHA=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits/$LATEST_COMMIT_SHA" | jq -r .parents[0].sha)
          echo "Parent commit SHA: $PARENT_COMMIT_SHA"

          # Get the list of changed files
          CHANGED_FILES=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/compare/$PARENT_COMMIT_SHA...$LATEST_COMMIT_SHA" | jq -r '.files[].filename')
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Process each changed file
          for file in $CHANGED_FILES; do
            echo "Processing file: $file"

            # Convert Java source path to class path
            class_file=$(echo $file | sed 's/src\/main\/java\///' | sed 's/\.java$/.class/')
            class_file_path="target/classes/$class_file"
            echo "Expected class file: $class_file_path"

            # Check if the class file exists and copy it
            if [ -f "$class_file_path" ]; then
              echo "Found compiled class file: $class_file_path"
              mkdir -p patch/$(dirname "$class_file")
              cp "$class_file_path" "patch/$class_file"
            else
              echo "Compiled class file not found for: $file"
            fi
          done

          echo "Patch created with modified class files."

      - name: Deploy to Tomcat Server
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.11-9/x64
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.USERNAME }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          TOMCAT_DIR: ${{ secrets.TOMCAT_DIR }}
        run: |
          echo "Preparing to deploy to server..."
          
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          echo "Attempting SCP transfer..."
          if scp -i private_key.pem -r patch/* $USERNAME@$SERVER_IP:$TOMCAT_DIR; then 
            echo "SCP transfer successful"
          else
            echo "SCP failed"
            exit 1
          fi

          echo "Extracting package to Tomcat webapps directory..."
          if ssh -i private_key.pem $USERNAME@$SERVER_IP "tar -xzf /tmp/package.tar.gz -C $TOMCAT_DIR/webapps"; then
            echo "Extraction successful"
          else
            echo "Extraction failed"
            exit 1
          fi

          echo "Restarting Tomcat server..."
          if ssh -i private_key.pem $USERNAME@$SERVER_IP "bash -c 'sh $TOMCAT_DIR/bin/shutdown.sh && sleep 5 && sudo sh $TOMCAT_DIR/bin/startup.sh'"; then
            echo "Tomcat restarted successfully"
          else
            echo "Tomcat restart failed"
            exit 1
          fi
          
          rm private_key.pem